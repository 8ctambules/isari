image: docker:stable

stages:
  - build
  - deploy
  - copy_prod2staging

variables:
  CLIENT_IMAGE_NAME: $CI_REGISTRY_IMAGE/client:$CI_COMMIT_REF_SLUG
  API_IMAGE_NAME: $CI_REGISTRY_IMAGE/api:$CI_COMMIT_REF_SLUG

build_client_image:
  stage: build
  script:
    - docker build -t $CLIENT_IMAGE_NAME -f ./client/Dockerfile .
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push $CLIENT_IMAGE_NAME
  environment:
    name: $CI_COMMIT_REF_SLUG
  only:
    - staging
    - production
    - tags

build_api_image:
  stage: build
  script:
    - docker build -t $API_IMAGE_NAME -f Dockerfile .
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push $API_IMAGE_NAME
  environment:
    name: $CI_COMMIT_REF_SLUG
  only:
    - staging
    - production
    - tags


deploy:
  variables:
    GIT_STRATEGY: none
  stage: deploy
  environment:
    name: $CI_COMMIT_REF_SLUG
    url: $BASEURL
  image: ubuntu
  script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - ssh -t $SSH_USER@$SSH_HOST "cd $STACK_DIR && docker-compose pull"
    - ssh -t $SSH_USER@$SSH_HOST "cd $STACK_DIR && docker-compose rm -f -s -v client"
    - ssh -t $SSH_USER@$SSH_HOST "cd $STACK_DIR && docker-compose rm -f -s -v api"
    - ssh -t $SSH_USER@$SSH_HOST "cd $STACK_DIR && docker-compose up -d"
  only:
    - staging
    - production
