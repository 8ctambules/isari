image: docker:stable

stages:
  - build
  - deploy
  - copy_prod2staging

variables:
  CLIENT_IMAGE_NAME: $CI_REGISTRY_IMAGE/client:$CI_COMMIT_REF_SLUG
  API_IMAGE_NAME: $CI_REGISTRY_IMAGE/api:$CI_COMMIT_REF_SLUG

build_client_image:
  stage: build
  script:
    - docker build -t $CLIENT_IMAGE_NAME -f ./client/Dockerfile .
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push $CLIENT_IMAGE_NAME
  environment:
    name: $CI_COMMIT_REF_SLUG
  only:
    - staging
    - production
    - tags

build_api_image:
  stage: build
  script:
    - docker build -t $API_IMAGE_NAME -f Dockerfile .
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push $API_IMAGE_NAME
  environment:
    name: $CI_COMMIT_REF_SLUG
  only:
    - staging
    - production
    - tags


deploy:
  stage: deploy
  image: cdrx/rancher-gitlab-deploy
  script:
    - upgrade --rancher-key $RANCHER_ACCESS_KEY --rancher-secret $RANCHER_SECRET_KEY --rancher-url $RANCHER_URL --environment $RANCHER_ENV --stack $RANCHER_STACK --service $RANCHER_ISARI_API_SERVICE --start-before-stopping
    - upgrade --rancher-key $RANCHER_ACCESS_KEY --rancher-secret $RANCHER_SECRET_KEY --rancher-url $RANCHER_URL --environment $RANCHER_ENV --stack $RANCHER_STACK --service $RANCHER_ISARI_CLIENT_SERVICE --start-before-stopping
  environment:
    name: $CI_COMMIT_REF_SLUG
    url: $BASEURL
  only:
    - staging
    - production


copy_prod2staging:copydata:
  variables:
    GIT_STRATEGY: none
  stage: copy_prod2staging
  environment:
    name: schedules
  image: ubuntu
  only:
    - schedules
  script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null  
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - ssh -t $SSH_USER@$SSH_HOST "sudo duplicity --no-encryption --force  --file-to-restore isari/mongo/isari/ file://${DUMP_PROD_PATH}  ${DUMP_PROD_RESTORE_PATH}"
    - ssh -t $SSH_USER@$SSH_HOST "scp ${DUMP_PROD_RESTORE_PATH}/*son ${DUMP_STAGING_HOST}:${DUMP_STAGING_RESTORE_PATH}"

copy_prod2staging:restoremongo:
  stage: copy_prod2staging
  variables:
    GIT_STRATEGY: none
  environment:
    name: schedules
  only:
    - schedules
  script:
    - docker run --rm -t -e RANCHER_URL=$RANCHER_URL -e RANCHER_ACCESS_KEY=$RANCHER_ACCESS_KEY -e RANCHER_SECRET_KEY=$RANCHER_SECRET_KEY jrisp/rancher-cli rancher --env ${RANCHER_ENV} exec -d ${RANCHER_STACK}/${RANCHER_ISARI_BACKUP_SERVICE} bash -c 'mongo --host mongo isari --eval "db.dropDatabase()"'
    - docker run --rm -t -e RANCHER_URL=$RANCHER_URL -e RANCHER_ACCESS_KEY=$RANCHER_ACCESS_KEY -e RANCHER_SECRET_KEY=$RANCHER_SECRET_KEY cdrx/rancher-gitlab-deploy upgrade --environment ${RANCHER_ENV} --stack ${RANCHER_STACK} --service ${RANCHER_MONGOCONNECTOR_SERVICE}  --auto_complete
    - docker run --rm -t -e RANCHER_URL=$RANCHER_URL -e RANCHER_ACCESS_KEY=$RANCHER_ACCESS_KEY -e RANCHER_SECRET_KEY=$RANCHER_SECRET_KEY jrisp/rancher-cli rancher --env ${RANCHER_ENV} exec -d ${RANCHER_STACK}/${RANCHER_ISARI_BACKUP_SERVICE} bash -c 'mongorestore --host mongo -d isari /backup/restore/'
